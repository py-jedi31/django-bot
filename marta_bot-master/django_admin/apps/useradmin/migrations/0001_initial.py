# Generated by Django 3.2.7 on 2022-06-21 10:05

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_admin.apps.useradmin.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
            ],
            options={
                'verbose_name': 'группу прав доступа',
                'verbose_name_plural': 'группы прав доступа',
                'db_table': 'useradmin_group',
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('tg_id', models.PositiveBigIntegerField(primary_key=True, serialize=False, verbose_name='Телеграм ID')),
                ('tg_name', models.CharField(max_length=32, null=True, verbose_name='Имя пользователя в Телеграм')),
                ('name', models.CharField(max_length=64, verbose_name='Имя')),
                ('region', models.CharField(default=None, max_length=256, null=True, verbose_name='Регион')),
                ('unit', models.CharField(default=None, max_length=256, null=True, verbose_name='Департамент')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Дата начала общения')),
            ],
            options={
                'verbose_name': 'пользователя бота',
                'verbose_name_plural': 'пользователи бота',
                'db_table': 'member',
            },
        ),
        migrations.CreateModel(
            name='MemberState',
            fields=[
                ('member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='useradmin.member', verbose_name='Пользователь')),
                ('main_message_id', models.PositiveIntegerField(verbose_name='id основного сообщения')),
                ('pin_message_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='id закрепленного сообщения')),
                ('state', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Положение пользователя')),
                ('has_init_poll', models.BooleanField(default=False, null=True, verbose_name='Пройден стартовый опрос')),
            ],
            options={
                'verbose_name': 'состояние пользователя бота ',
                'verbose_name_plural': 'состояния пользователей бота',
                'db_table': 'member_state',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('telegram_id', models.PositiveBigIntegerField(blank=True, null=True, verbose_name='Телеграм ID')),
                ('on_vacation', models.BooleanField(default=False, verbose_name='В отпуске')),
                ('is_staff', models.BooleanField(default=True, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'администратора бота',
                'verbose_name_plural': 'администраторы бота',
                'db_table': 'user_admin',
            },
            managers=[
                ('objects', django_admin.apps.useradmin.models.CustomUserManager()),
            ],
        ),
    ]
